{"version":3,"sources":["Unit.jsx","App.js","index.js"],"names":["Square","styled","div","props","y","x","ChessHover","Chess","chessColor","Unit","addChess","board","nextColor","onClick","useState","React","useEffect","Row","Wrapper","Navbar","Title","OtherInformation","RestartButton","button","ChessBoard","winner","WinnerMetal","App","Array","fill","setBoard","setNextColor","currentY","setCurrentY","currentX","setCurrentX","setWinner","newBoard","JSON","parse","stringify","direction","right","left","up","down","leftUp","rightDown","rightUp","leftDown","countSame","yDirection","xDirection","willCheckX","willCheckY","checkColor","counter","className","map","row","noUse","window","location","reload","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.159f87a2.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Square = styled.div`\r\n  border: 1px solid black;\r\n  position: relative;\r\n  height: 34px;\r\n  width: 34px;\r\n  margin: 0px;\r\n  padding: 0;\r\n  background: none;\r\n\r\n  ${props => props.y === 0 && `border-top:2px solid black;`} // 修正線太細\r\n  ${props => props.x === 0 && `border-left:2px solid black;`} // 修正線太細\r\n\r\n  ${props => props.y === 17 && `border-bottom:2px solid black;`} // 修正線太細\r\n  ${props => props.x === 17 && `border-right:2px solid black;`} // 修正線太細\r\n\r\n  ${props =>\r\n    props.y === 18 &&\r\n    `border:none;margin-left:2px;`} // 修正多出來的一格，不讓它顯示，修正棋子偏移\r\n  ${props => props.x === 18 && `border:none;`} // 修正多出來的一格，不讓它顯示\r\n`\r\nconst ChessHover = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  border-radius: 50%;\r\n  top: -55%;\r\n  left: -55%;\r\n  z-index: 1;\r\n  &:hover {\r\n    background: radial-gradient(#ffff00, rgba(0, 0, 0, 0));\r\n    cursor: pointer;\r\n  }\r\n`\r\nconst Chess = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  border-radius: 50%;\r\n  top: -58%;\r\n  left: -58%;\r\n  z-index: 1;\r\n  ${props =>\r\n    props.chessColor === 'black' &&\r\n    `background: black;animation: fadeInBlack ease-in-out 0.3s;\r\n    border: black solid 2px;transform: scale(0.8);`}\r\n  ${props =>\r\n    props.chessColor === 'white' &&\r\n    `background: white;animation: fadeInWhite ease-in-out 0.3s;\r\n    border: black solid 2px;transform: scale(0.8);`}\r\n  @keyframes fadeInBlack {\r\n    0% {\r\n      opacity: 0%;\r\n    }\r\n    50% {\r\n      background: black;\r\n      transform: scale(1.2);\r\n    }\r\n    100% {\r\n      opacity: 100%;\r\n    }\r\n  }\r\n  @keyframes fadeInWhite {\r\n    0% {\r\n      opacity: 0%;\r\n    }\r\n    50% {\r\n      background: white;\r\n      transform: scale(1.2);\r\n    }\r\n    100% {\r\n      opacity: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default function Unit(props) {\r\n  const { y, x, addChess, board, nextColor } = props // 獲取從 map 弄出來的 y x 傳過來這邊\r\n  const chessColor = board[y][x]\r\n  // 因為 board 上面記錄的是 white black， board[y][x] 可以取出是哪個顏色的字串，傳入 Chess render 顏色\r\n  return (\r\n    <>\r\n      <Square\r\n        x={x}\r\n        y={y}\r\n        onClick={() => {\r\n          addChess(y, x, nextColor)\r\n        }}\r\n      >\r\n        <Chess chessColor={chessColor} />\r\n        <ChessHover></ChessHover>\r\n      </Square>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\nimport styled from 'styled-components'\nimport Unit from './Unit'\n\nconst { useState, useEffect } = React\nconst Row = styled.div`\n  clear: both;\n  content: '';\n  display: flex;\n  margin: 0 auto;\n`\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`\nconst Navbar = styled.div`\n  margin-left: 50px;\n  margin-top: 50px;\n  display: flex;\n  flex-direction: column;\n`\nconst Title = styled.div`\n  font-size: 80px;\n  color: black;\n`\nconst OtherInformation = styled.div`\n  display: flex;\n  font-size: 35px;\n  margin-top: 43px;\n`\nconst RestartButton = styled.button`\n  width: 180px;\n  color: white;\n  font-size: 20px;\n  padding: 8px;\n  background: #fc6586;\n  border-radius: 10px;\n  border: #fc3251 solid 2px;\n  margin-left: 40px;\n`\n\nconst ChessBoard = styled.div`\n  position: relative;\n  margin-top: 19px;\n  width: 690px;\n  margin-left: 150px;\n  border: 2px solid black;\n  padding-top: 38px;\n  padding-left: 38px;\n  ${(\n    props // shake1 shake2 是因為如果是同一個名字的話，只會觸發第一次而已\n  ) => props.nextColor === 'white' && `animation: shake1 100ms ease-in-out;`}\n  ${props =>\n    props.nextColor === 'black' && `animation: shake2 100ms ease-in-out;`}\n  @keyframes shake1 {\n    0% {\n    }\n    50% {\n      transform: scale(0.995);\n    }\n    100% {\n    }\n  }\n  @keyframes shake2 {\n    0% {\n    }\n    50% {\n      transform: scale(0.996);\n    }\n    100% {\n    }\n  }\n  ${props =>\n    props.winner &&\n    `&::after {\n    content:'';\n    display:block;\n    width:100%;\n    height:100%;\n    background-color: rgba(252,101,134,0.35);\n    position:absolute;\n    top:0;\n    left:0;\n    z-index:2;\n  }`}\n`\nconst WinnerMetal = styled.div`\n  ${props =>\n    props.winner &&\n    `color: black;\nfont-size: 50px;\nmargin-top:70px;\nwidth:460px;\ntext-align:center;\nborder: solid #fc3251 4px;\nborder-radius: 20px;\npadding: 10px;\nanimation: metalPop ease-in-out 800ms;\n\n`}\n  @keyframes metalPop {\n    10%,\n    90% {\n      transform: scale(1.1);\n    }\n    20%,\n    80% {\n      transform: translate3d(+2px, 0, 0);\n    }\n    30%,\n    70% {\n      transform: scale(1.25);\n    }\n    40%,\n    60% {\n      transform: translate3d(+2px, 0, 0);\n    }\n    50% {\n      transform: scale(1.3);\n    }\n  }\n`\nfunction App() {\n  const SIZE = 19\n  const [board, setBoard] = useState(Array(SIZE).fill(Array(SIZE).fill(null)))\n  const [nextColor, setNextColor] = useState('black')\n  const [currentY, setCurrentY] = useState(0)\n  const [currentX, setCurrentX] = useState(0)\n  const [winner, setWinner] = useState(null)\n  const addChess = (y, x, nextColor) => {\n    if (board[y][x] !== null) return\n    if (winner) return\n    const newBoard = JSON.parse(JSON.stringify(board))\n    setCurrentY(y)\n    setCurrentX(x)\n    newBoard[y][x] = nextColor\n    setBoard(newBoard)\n    nextColor === 'black' ? setNextColor('white') : setNextColor('black')\n  }\n  function checkWinneer() {\n    if (\n      countSame(direction.right) + countSame(direction.left) === 4 ||\n      countSame(direction.up) + countSame(direction.down) === 4 ||\n      countSame(direction.leftUp) + countSame(direction.rightDown) === 4 ||\n      countSame(direction.rightUp) + countSame(direction.leftDown) === 4\n    ) {\n      setWinner(nextColor === 'black' ? '白棋' : '黑棋')\n    }\n  }\n  const direction = {\n    right: [0, 1],\n    left: [0, -1],\n    up: [-1, 0],\n    down: [1, 0],\n    leftUp: [-1, -1],\n    rightDown: [1, 1],\n    rightUp: [-1, 1],\n    leftDown: [1, -1],\n  }\n  function countSame(direction) {\n    const [yDirection, xDirection] = direction // yDirection, xDirection 是要檢查的方向\n    let willCheckX = currentX + xDirection // currentX 是拿來定位剛剛下在哪裡的\n    let willCheckY = currentY + yDirection // currentY 是拿來定位剛剛下在哪裡的\n    let checkColor = null // checkColor 是上一手的顏色， nextColor 是正在思考要下哪裡的顏色\n    let counter = 0 // 看有幾個相同\n    nextColor === 'black' ? (checkColor = 'white') : (checkColor = 'black') // 設定 checkColor\n    while (\n      willCheckX >= 0 &&\n      willCheckY >= 0 &&\n      willCheckX < 19 &&\n      willCheckY < 19\n    ) {\n      if (board[willCheckY][willCheckX] === checkColor) {\n        // 被檢查的顏色，和上一手相同那就計數器＋＋\n        counter++ // 這個方向已經找到一個相同的了，就繼續找看還有沒有相同的\n        willCheckX = willCheckX + xDirection // 設定下一次的要搜尋的 x\n        willCheckY = willCheckY + yDirection // 設定下一次的要搜尋的 y\n      } else {\n        // 如果不是相同的，那就沒有必要找下去，終止這個 while loop\n        break // 退出循環\n      }\n    }\n    return counter // 回傳「這個方向」總共數到幾個相同的棋子\n  }\n  function handleRestartClick() {\n    window.location.reload()\n  }\n  useEffect(() => {\n    checkWinneer()\n  }, [nextColor])\n\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <ChessBoard nextColor={nextColor} winner={winner}>\n          {board.map((row, y) => {\n            return (\n              <Row key={y} y={y}>\n                {row.map((noUse, x) => {\n                  return (\n                    <Unit\n                      key={x}\n                      y={y}\n                      x={x}\n                      addChess={addChess}\n                      board={board}\n                      nextColor={nextColor}\n                    />\n                  )\n                })}\n              </Row>\n            )\n          })}\n        </ChessBoard>\n        <Navbar>\n          <Title>超級五子棋</Title>\n          <OtherInformation>\n            {nextColor === 'black' ? '黑棋' : '白棋'}，該你下了\n            <RestartButton onClick={handleRestartClick}>\n              不算啦，重來一次\n            </RestartButton>\n          </OtherInformation>\n          <WinnerMetal winner={winner}>\n            {winner ? `恭喜${winner}獲勝🎊🎉🥳這是一盤精采的對戰` : ``}\n          </WinnerMetal>\n        </Navbar>\n      </Wrapper>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}